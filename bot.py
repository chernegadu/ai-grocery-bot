
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from openai import OpenAI
from fpdf import FPDF

# === üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π –∏ –¥–æ—Å—Ç—É–ø–∞ ===
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
OWNER_ID = int(os.environ.get("OWNER_ID", "178564204"))
ALLOWED_USERS = [OWNER_ID]

client = OpenAI(api_key=OPENAI_API_KEY)
shopping_list = []

# === üìÇ –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = [
        [InlineKeyboardButton("üõí –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='show')],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='clear')],
        [InlineKeyboardButton("üìÑ PDF-–≤–µ—Ä—Å–∏—è", callback_data='pdf')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–∫–æ–Ω—Å—å–µ—Ä–∂. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === üîë –ö–æ–º–∞–Ω–¥–∞ /add_user <id> ===
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/add_user 987654321`", parse_mode="Markdown")
        return

    try:
        user_id = int(context.args[0])
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# === üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    user_text = update.message.text.lower()

    if user_text.startswith("—É–¥–∞–ª–∏ ") or user_text.startswith("—É–±–µ—Ä–∏ "):
        item = user_text.replace("—É–¥–∞–ª–∏ ", "").replace("—É–±–µ—Ä–∏ ", "").strip()
        if item in shopping_list:
            shopping_list.remove(item)
            await update.message.reply_text(f"‚ùå –£–¥–∞–ª–∏–ª: {item}")
        else:
            await update.message.reply_text("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        return

    if "—Å–ø–∏—Å–æ–∫" in user_text:
        if shopping_list:
            await update.message.reply_text("üõí –¢–≤–æ–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(f"‚Ä¢ {item}" for item in shopping_list))
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    if "–æ—á–∏—Å—Ç–∏" in user_text or "—É–¥–∞–ª–∏ –≤—Å—ë" in user_text:
        shopping_list.clear()
        await update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")
        return

    prompt keywords = ["–∫—É–ø–∏", "–Ω—É–∂–Ω–æ", "–¥–æ–±–∞–≤—å", "–≤ —Å–ø–∏—Å–æ–∫", "–Ω–∞–¥–æ", "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"]

if any(word in user_text for word in keywords):
    prompt = f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∫—É–ø–∫–∞–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{user_text}\". 
    –í—ã–¥–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )
        items = response.choices[0].message.content.strip().split(",")
        items = [item.strip() for item in items if item.strip()]
        shopping_list.extend(items)

        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(f"‚Ä¢ {item}" for item in items))
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç OpenAI:\n{e}")
else:
    await update.message.reply_text("ü§ñ –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –°–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )
        items = response.choices[0].message.content.strip().split(",")
        items = [item.strip() for item in items if item.strip()]
        shopping_list.extend(items)
        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(f"‚Ä¢ {item}" for item in items))
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç OpenAI:\n{e}")

# === üõÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in ALLOWED_USERS:
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if query.data == 'show':
        text = "\n".join(f"‚Ä¢ {item}" for item in shopping_list) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await query.edit_message_text(f"üõí –°–ø–∏—Å–æ–∫:\n{text}")
    elif query.data == 'clear':
        shopping_list.clear()
        await query.edit_message_text("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")
    elif query.data == 'pdf':
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, "\n".join(f"‚Ä¢ {item}" for item in shopping_list) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        pdf.output("shopping_list.pdf")
        await query.edit_message_text("üìÑ PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ `shopping_list.pdf`.")

# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add_user", add_user))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(button_handler))
app.run_polling()
